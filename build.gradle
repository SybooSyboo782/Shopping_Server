plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'org.cyclonedx.bom' version '1.8.2'
}
apply plugin: 'io.spring.dependency-management'

group = 'com.syboo'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // 엑셀 파일 입출력 용도
    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation 'org.apache.poi:poi-ooxml:5.2.5'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-compress
    implementation 'org.apache.commons:commons-compress:1.26.2'
    // 파일 입출력 용도
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.16.1'
    // ORM JPA 용도
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Mongo DB 용도
    // implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    // 메일 용도
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // 보안 용도
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // 유효성 검사 용도
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // 메일 템플릿 용도
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    // Spring Web MVC 용도
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // 복잡한 쿼리 및 조회 쿼리 처리 용도
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    // 코드 줄이기 용도
    compileOnly 'org.projectlombok:lombok'
    // live reload 등 개발 도움 용도
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // Postgres Db 용도
    runtimeOnly 'org.postgresql:postgresql'
    // Gson : 자바 -> JSON, JSON -> 자바 쉽게 표현 및 변환 용도
    implementation 'com.google.code.gson:gson:2.11.0'

    // Test 용도
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
    //testImplementation 'org.springframework.security:spring-security-test'
}

cyclonedxBom {
    // includeConfigs is the list of configuration names to include when generating the BOM (leave empty to include every configuration), regex is supported
    includeConfigs = ["runtimeClasspath"]
    // skipConfigs is a list of configuration names to exclude when generating the BOM, regex is supported
    skipConfigs = ["compileClasspath", "testCompileClasspath"]
    // skipProjects is a list of project names to exclude when generating the BOM
    skipProjects = [rootProject.name, "yourTestSubProject"]
    // Specified the type of project being built. Defaults to 'library'
    projectType = "application"
    // Specified the version of the CycloneDX specification to use. Defaults to '1.5'
    schemaVersion = "1.5"
    // Boms destination directory. Defaults to 'build/reports'
    destination = file("build/reports")
    // The file name for the generated BOMs (before the file format suffix). Defaults to 'bom'
    outputName = "bom"
    // The file format generated, can be xml, json or all for generating both. Defaults to 'all'
    outputFormat = "xml"
    // Exclude BOM Serial Number. Defaults to 'true'
    includeBomSerialNumber = false
    // Exclude License Text. Defaults to 'true'
    includeLicenseText = false
    // Override component version. Defaults to the project version
    componentVersion = "2.0.0"
}

tasks.named('test') {
    useJUnitPlatform()
}
